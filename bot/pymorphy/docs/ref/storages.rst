Поддерживаемые типы хранилищ
============================

.. _supported-storages:

Словари лежат тут: https://bitbucket.org/kmike/pymorphy/downloads/ и
называются по формуле ``<язык>.<тип базы>-<формат данных>.zip``.

.. warning::

    Не скачивайте словари вида ``<язык>.<тип базы>.zip`` (например,
    ``ru.sqlite.zip``  - без 'json'), эти словари устаревшие: работают
    медленнее, в sqlite-словарях серьезная ошибка. В разделе для скачивания
    они пока оставлены в целях совместимости.


Типы хранилищ
-------------

SQLite
^^^^^^

Файлы со словарями имеют расширение "``.sqlite``". Набор словарей
для русского языка: `ru.sqlite-json.zip <https://bitbucket.org/kmike/pymorphy/downloads/ru.sqlite-json.zip>`_.
Пример подключения::

    m = get_morph('dicts/ru', 'sqlite')

Преимущество - в совместимости. Не требует установки, кроссплатформенный формат
хранения данных. Если какие-то проблемы с использованием других
вариантов, можно использовать SQLite. Вариант по умолчанию.

Этот самый медленный вариант.


CDB
^^^

Файлы со словарями имеют расширение "``.cdb``". Набор словарей
для русского языка: `ru.cdb-json.zip <https://bitbucket.org/kmike/pymorphy/downloads/ru.cdb-json.zip>`_.

Поддерживается 2 варианта работы с этими словарями: через библиотеки python-cdb и tinycdb.
Для установки каждой из библиотек потребуются установленные средства сборки (gcc, заголовочные файлы питона).

python-cdb быстрее, требует больше памяти и (осторожно!) распространяется по лицензии GPL.

Установка::

    $ pip install python-cdb

Пример подключения::

    m = get_morph('dicts/ru', 'python-cdb')

tinycdb медленнее, требует меньше памяти и распространяется по лицензии MIT + Public Domain.

Установка::

    $ pip install tinycdb

Пример подключения::

    m = get_morph('dicts/ru', 'tinycdb')


Выбор хранилища
---------------

* Хочется быстро все попробовать, не заморачиваясь за установку: SQLite.
* Нужна большая скорость: CDB.
* Нужна максимальная скорость: используем pickle (осторожно, потребуется
  200-300Мб оперативной памяти).

Кеширование сильно ускоряет работу и включено по умолчанию, но оно увеличивает
потребление памяти в соответствии с тем, сколько разных парадигм и правил
было запрошено.

Общая информация
----------------

Алгоритмы в pymorphy устроены так, что требуют для работы данные в виде
словарей и массивов. Изначально pymorphy использовал структуры
``list`` и ``dict`` для хранения данных о словах и словообразовании.

Это работало быстро, но требовало большого количества оперативной памяти.
Поэтому сейчас для того, чтобы не загружать все словари сразу в память,
данные берутся из одной из key-value базы данных.

.. note::

    Интерфейс доступа к key-value хранилищам при этом остался тем же.
    Т.е. требование к хранилищу (обертке над хранилищем) - притворяться
    массивом или словарем, а именно - поддерживать ``[]`` и ``in``
    (``__getitem__``, ``__setitem__`` и ``__contains__``).

