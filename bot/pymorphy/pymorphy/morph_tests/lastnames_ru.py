#-*- coding: UTF-8
from __future__ import absolute_import, unicode_literals
from pymorphy.contrib import lastnames_ru
from .base import unittest2, MorphTestCase
from .dicts import morph_ru


class LastnameNormalFormTest(MorphTestCase):
    testcase = [
        ('Титов', 'мр', 'Титов'),
        ('Титовым', 'мр', 'Титов'),
        ('Титова', 'мр', 'Титов'),
        ('Титове', 'мр', 'Титов'),
        ('Титова', 'жр', 'Титова'),
        ('Титовой', 'жр', 'Титова'),
        ('Титову', 'жр', 'Титова'),
        ('Медведев', 'мр', 'Медведев'),
        ('Медведевым', 'мр', 'Медведев'),
        ('Медведеву', 'мр', 'Медведев'),
        ('Медведева', 'мр', 'Медведев'),
        ('Медведеве', 'мр', 'Медведев'),
        ('Медведева', 'жр', 'Медведева'),
        ('Медведевой', 'жр', 'Медведева'),
        ('Медведеву', 'жр', 'Медведева'),
        ('Янукович', 'мр', 'Янукович'),
        ('Януковичу', 'мр', 'Янукович'),
        ('Януковичем', 'мр', 'Янукович'),
        ('Януковиче', 'мр', 'Янукович'),
        ('Януковича', 'мр', 'Янукович'),
        ('Янукович', 'жр', 'Янукович'),
        ('Мутко', 'мр', 'Мутко'),
        ('Мутко', 'жр', 'Мутко'),
        ('Штирлиц', 'мр', 'Штирлиц'),
        ('Штирлицем', 'мр', 'Штирлиц'),
        ('Штирлицу', 'мр', 'Штирлиц'),
        ('Штирлице', 'мр', 'Штирлиц'),
        ('Штирлиц', 'жр', 'Штирлиц'),
        ('Тихонов', 'мр', 'Тихонов'),
        ('Тихонову', 'мр', 'Тихонов'),
        ('Тихонове', 'мр', 'Тихонов'),
        ('Тихоновым', 'мр', 'Тихонов'),
        ('Тихонова', 'жр', 'Тихонова'),
        ('Тихоновой', 'жр', 'Тихонова'),
        ('Сысоев', 'мр', 'Сысоев'),
        ('Сысоевым', 'мр', 'Сысоев'),
        ('Сысоеву', 'мр', 'Сысоев'),
        ('Сысоеве', 'мр', 'Сысоев'),
        ('Сысоева', 'жр', 'Сысоева'),
        ('Сысоевой', 'жр', 'Сысоева'),
        ('Достоевский', 'мр', 'Достоевский'),
        ('Достоевскому', 'мр', 'Достоевский'),
        ('Достоевским', 'мр', 'Достоевский'),
        ('Достоевском', 'мр', 'Достоевский'),
        ('Достоевская', 'жр', 'Достоевская'),
        ('Достоевской', 'жр', 'Достоевская'),
        ('Достоевскую', 'жр', 'Достоевская'),
        ('Табуретов', 'мр', 'Табуретов'),
        ('Табуретову', 'мр', 'Табуретов'),
        ('Табуретова', 'мр', 'Табуретов'),
        ('Табуретовым', 'мр', 'Табуретов'),
        ('Табуретове', 'мр', 'Табуретов'),
        ('Табуретова', 'жр', 'Табуретова'),
        ('Табуретову', 'жр', 'Табуретова'),
        ('Табуретовой', 'жр', 'Табуретова'),
        ('Крамской', 'мр', 'Крамский'),
        ('Крамского', 'мр', 'Крамский'),
        ('Крамскому', 'мр', 'Крамский'),
        ('Крамском', 'мр', 'Крамский'),
        ('Крамская', 'жр', 'Крамская'),
        ('Крамской', 'жр', 'Крамская'),
        ('Крамскую', 'жр', 'Крамская'),
        ('Куцых', 'мр', 'Куцых'),
        ('Куцых', 'жр', 'Куцых'),
        ('Путин', 'мр', 'Путин'),
        ('Путина', 'мр', 'Путин'),
        ('Путину', 'мр', 'Путин'),
        ('Путине', 'мр', 'Путин'),
        ('Путиным', 'мр', 'Путин'),
        ('Путина', 'жр', 'Путина'),
        ('Путину', 'жр', 'Путина'),
        ('Коваль', 'мр', 'Коваль'),
        ('Ковалю', 'мр', 'Коваль'),
        ('Ковалем', 'мр', 'Коваль'),
        ('Ковале', 'мр', 'Коваль'),
        ('Коваля', 'мр', 'Коваль'),
        ('Коваль', 'жр', 'Коваль'),
        ('Живаго', 'мр', 'Живаго'),
        ('Живаго', 'жр', 'Живаго'),
        ('Шевченко', 'мр', 'Шевченко'),
        ('Шевченко', 'жр', 'Шевченко'),
        ('Жук', 'мр', 'Жук'),
        ('Жука', 'мр', 'Жук'),
        ('Жуком', 'мр', 'Жук'),
        ('Жуку', 'мр', 'Жук'),
        ('Жуке', 'мр', 'Жук'),
        ('Жук', 'жр', 'Жук'),
        ('Козлов', 'мр', 'Козлов'),
        ('Козлову', 'мр', 'Козлов'),
        ('Козловым', 'мр', 'Козлов'),
        ('Козлове', 'мр', 'Козлов'),
        ('Козлова', 'жр', 'Козлова'),
        ('Козлову', 'жр', 'Козлова'),
        ('Козловой', 'жр', 'Козлова'),
        ('Шоу', 'мр', 'Шоу'),
        ('Шоу', 'жр', 'Шоу'),
        ('Толстой', 'мр', 'Толстый'),
        ('Толстым', 'мр', 'Толстый'),
        ('Толстому', 'мр', 'Толстый'),
        ('Толстого', 'мр', 'Толстый'),
        ('Толстом', 'мр', 'Толстый'),
        ('Толстая', 'жр', 'Толстая'),
        ('Толстой', 'жр', 'Толстая'),
        ('Толстую', 'жр', 'Толстая'),
        ('Герцен', 'мр', 'Герцен'),
        ('Герцена', 'мр', 'Герцен'),
        ('Герценом', 'мр', 'Герцен'),
        ('Герцену', 'мр', 'Герцен'),
        ('Герцене', 'мр', 'Герцен'),
        ('Герцен', 'жр', 'Герцен'),
        ('Левитан', 'мр', 'Левитан'),
        ('Левитану', 'мр', 'Левитан'),
        ('Левитаном', 'мр', 'Левитан'),
        ('Левитане', 'мр', 'Левитан'),
        ('Левитан', 'жр', 'Левитан'),
        ('Берия', 'мр', 'Берия'),
        ('Берию', 'мр', 'Берия'),
        ('Берии', 'мр', 'Берия'),
        ('Берией', 'мр', 'Берия'),
        ('Берия', 'жр', 'Берия'),
        ('Берии', 'жр', 'Берия'),
        ('Берию', 'жр', 'Берия'),
        ('Гулиа', 'мр', 'Гулиа'),
        ('Гулиа', 'жр', 'Гулиа'),
        ('Зыков', 'мр', 'Зыков'),
        ('Зыкова', 'мр', 'Зыков'),
        ('Зыкову', 'мр', 'Зыков'),
        ('Зыковым', 'мр', 'Зыков'),
        ('Зыкове', 'мр', 'Зыков'),
        ('Зыкова', 'жр', 'Зыкова'),
        ('Зыковой', 'жр', 'Зыкова'),
        ('Зыкову', 'жр', 'Зыкова'),
        ('Ильвес', 'мр', 'Ильвес'),
        ('Ильвеса', 'мр', 'Ильвес'),
        ('Ильвесу', 'мр', 'Ильвес'),
        ('Ильвеса', 'мр', 'Ильвес'),
        ('Ильвесом', 'мр', 'Ильвес'),
        ('Ильвесе', 'мр', 'Ильвес'),
        ('Адамкус', 'мр', 'Адамкус'),
        ('Адамкуса', 'мр', 'Адамкус'),
        ('Адамкусу', 'мр', 'Адамкус'),
        ('Адамкуса', 'мр', 'Адамкус'),
        ('Адамкусом', 'мр', 'Адамкус'),
        ('Адамкусе', 'мр', 'Адамкус'),
        ('Годманис', 'мр', 'Годманис'),
        ('Годманиса', 'мр', 'Годманис'),
        ('Годманису', 'мр', 'Годманис'),
        ('Годманиса', 'мр', 'Годманис'),
        ('Годманисом', 'мр', 'Годманис'),
        ('Годманисе', 'мр', 'Годманис'),
        ('Акопян', 'мр', 'Акопян'),
        ('Акопяна', 'мр', 'Акопян'),
        ('Акопяну', 'мр', 'Акопян'),
        ('Акопяна', 'мр', 'Акопян'),
        ('Акопяном', 'мр', 'Акопян'),
        ('Акопяне', 'мр', 'Акопян'),
        ('Акопан', 'мр', 'Акопан'),
        ('Акопане', 'мр', 'Акопан'),
        ('Акопану', 'мр', 'Акопан'),
        ('Акопане', 'мр', 'Акопан'),
        ('Акопаном', 'мр', 'Акопан'),
        ('Акопане', 'мр', 'Акопан'),
        ('Акопянц', 'мр', 'Акопянц'),
        ('Акопянца', 'мр', 'Акопянц'),
        ('Акопянцу', 'мр', 'Акопянц'),
        ('Акопянца', 'мр', 'Акопянц'),
        ('Акопянцем', 'мр', 'Акопянц'),
        ('Акопянце', 'мр', 'Акопянц'),
        ('Кравчук', 'мр', 'Кравчук'),
        ('Кравчука', 'мр', 'Кравчук'),
        ('Кравчуку', 'мр', 'Кравчук'),
        ('Кравчука', 'мр', 'Кравчук'),
        ('Кравчуком', 'мр', 'Кравчук'),
        ('Кравчуке', 'мр', 'Кравчук'),
        ('Цапок', 'мр', 'Цапок'),
        ('Цапка', 'мр', 'Цапок'),
        ('Цапку', 'мр', 'Цапок'),
        ('Цапком', 'мр', 'Цапок'),
        ('Собчак', 'мр', 'Собчак'),
        ('Собчака', 'мр', 'Собчак'),
        ('Собчаку', 'мр', 'Собчак'),
        ('Собчака', 'мр', 'Собчак'),
        ('Собчаком', 'мр', 'Собчак'),
        ('Собчаке', 'мр', 'Собчак'),
        ('Петровичу', 'мр', 'Петрович'), # пример из документации
        ('Кроссового', 'мр', 'Кроссовый'), # пример из документации
        ('Махно', 'мр', 'Махно'),
        ('Махно', 'жр', 'Махно'),
        ('Бегунец', 'мр', 'Бегунец'),
        ('Бегунца', 'мр', 'Бегунец'),
        ('Бегунцу', 'мр', 'Бегунец'),
        ('Бегунцом', 'мр', 'Бегунец'),
        ('Бегунце', 'мр', 'Бегунец'),
        ('Бегунец', 'жр', 'Бегунец'),
        ('', 'мр', ''),
    ]

    def test_normal_form(self):
        for lastname, gender_tag, expected_lastname in self.testcase:
            res = lastnames_ru.normalize(morph_ru, lastname.upper(), gender_tag)
            self.assertEqualRu(res.capitalize(), expected_lastname)

    def test_improper_guess(self):
        res = lastnames_ru.normalize(morph_ru, 'Ильвесом'.upper(), 'мр')
        self.assertEqualRu(res.capitalize(), 'Ильвес')

    def test_hints_defaults(self):
        case = 'Титову'.upper()

        self.assertEqualRu(lastnames_ru.normalize(morph_ru, case, ''),
            lastnames_ru.normalize(morph_ru, case, 'мр'))
        self.assertNotEqualRu(lastnames_ru.normalize(morph_ru, case, ''),
            lastnames_ru.normalize(morph_ru, case, 'жр'))


class LastnameMisoperationsTest(MorphTestCase):
    testcase = [
        ('Кроссовый', 'мр', 'Кроссов'),
        ('Петровичу', 'жр', 'Петрович'),
    ]

    def test_misoperations(self):
        for word, gender_tag, wrong in self.testcase:
            res = lastnames_ru.normalize(morph_ru, word.upper(), gender_tag)
            self.assertNotEqualRu(res.capitalize(), wrong)


class LastnameInflectTest(MorphTestCase):
    testcase = [
        ('Суворову', 'жр,дт', 'Суворовой'),
        ('Суворову', 'мр,дт', 'Суворову'),
        ('Суворов', 'им,ед', 'Суворов'),
    ]

    def test_inflect(self):
        for word, gram_form, expected in self.testcase:
            res = lastnames_ru.inflect(morph_ru, word.upper(), gram_form)
            self.assertEqualRu(res.capitalize(), expected)


class LastnameGraminfoTest(MorphTestCase):
    testcase = [
        ('Суворову', ('мр,дт', 'жр,вн',)),
        ('Козловых', ('мр-жр,мн,рд', 'мр-жр,мн,вн', 'мр,ед,им', 'жр,ед,им')),
    ]

    def test_get_graminfo(self):
        for word, expected in self.testcase:
            gram_info = lastnames_ru.get_graminfo(word.upper())

            expectations_met = 0
            for form in gram_info:
                form_tokens = [token.strip() for token in form.get('info', '').split(',')]
                for expected_form in expected:
                    expected_tokens = [token.strip() for token in expected_form.split(',')]

                    expectations_met += 1
                    for token in expected_tokens:
                        if token not in form_tokens:
                            expectations_met -= 1
                            break

            self.assertGreaterEqual(expectations_met, len(expected))


class LastnamePluralizeTest(MorphTestCase):

    def test_pluralize(self):
        testcase = [
            ('Колобков', '', 'Колобковы'),
            ('Колобков', 'тв', 'Колобковыми'),
            ('Колобкову', 'мр', 'Колобковым'), # исходная форма - 'дт', результат - 'дт'
            ('Колобкову', 'жр', 'Колобковых'), # 'вн'
            ('Достоевский', '', 'Достоевские'),
            ('Достоевскому', 'мр', 'Достоевским'),
            ('Достоевский', 'тв', 'Достоевскими'),
            ('Достоевской', 'жр', 'Достоевских'), # 'рд'
            ('Цапок', '', 'Цапки'),
            ('Цапок', 'жр,тв', 'Цапками'),
            ('Цапка', '', 'Цапков'), # 'рд'
            ('Цапке', '', 'Цапках'), # 'пр'
            ('Беглых', '', 'Беглых'), # та же форма во мн. числе
            ('Каменских', '', 'Каменских'),
            ('Мутко', '', 'Мутко'),
            ('Акопян', '', 'Акопян'),
            ('Гулиа', '', 'Гулиа'),
        ]

        for lastname, gram_form, expected in testcase:
            pluralized = lastnames_ru.pluralize(morph_ru, lastname.upper(), gram_form)
#            print lastname, pluralized, expected
            self.assertEqualRu(pluralized, expected.upper())

    def test_pluralize_inflected(self):
        testcase = [
            ('Попугаев', 1, 'Попугаев', ''),
            ('Попугаев', 2, 'Попугаевых', ''),
            ('Попугаев', 5, 'Попугаевых', ''),
            ('Попугаев', 1, 'Попугаев', 'мр'),
            ('Попугаев', 2, 'Попугаевых', 'мр'),
            ('Попугаев', 5, 'Попугаевых', 'мр'),
            ('Попугаева', 1, 'Попугаева', 'жр'),
            ('Попугаева', 2, 'Попугаевых', 'жр'),
            ('Попугаева', 5, 'Попугаевых', 'жр'),
        ]

        for lastname, num, expected, hints in testcase:
            pluralized = lastnames_ru.pluralize_inflected(morph_ru, lastname.upper(), num, hints)
#            print lastname, pluralized, expected
            self.assertEqualRu(pluralized, expected.upper())


class LastnameDeclineTest(MorphTestCase):

    def test_gram_form_filter(self):
        self.assertEqual(len(lastnames_ru.decline('Котов'.upper(), 'мр,им,ед')), 1)
        self.assertEqual(len(lastnames_ru.decline('Котов'.upper(), 'жр,им,ед')), 1)
        self.assertEqual(len(lastnames_ru.decline('Котов'.upper(), 'им,ед')), 2) # мр + жр
        self.assertEqual(len(lastnames_ru.decline('Котов'.upper(), 'им,мн')), 1) # мн
        self.assertEqual(len(lastnames_ru.decline('Котов'.upper(), 'им')), 3) # мр + жр + мн

if __name__ == '__main__':
    # Упс, относительные импорты сломали возможность запускать скрипт отдельно.
    # А обычные мы использовать не можем, т.к. morph_tests не ставится
    # вместе с pymorphy.
    unittest2.main()
