Общие сведения
==============

**Suggest** --- это система предоставления подсказок во время набора
поискового запроса. Особенностями являются:

1. Способность выдавать подсказки несмотря на допущенные орфографические
   ошибки.

2. Возможность группировать подсказки по тематикам.

Система разбивается на несколько частей:

* Основной структурой данных, используемой в работе сервиса, является
  Trie, помещённое в массив. Классы для работы с этой структурой данных
  вынесены в библиотеку ``TrieLib``. С ёё помощью можно создавать деревья,
  сериализовать созданные деревья, обходить их и искать строки по шаблону
  (напоминающем сильно урезанное подмножество регулярных выражений).

  Тесты к этой библиотеке находятся в папке ``TrieLibTest``.

* Функции, которые занимаются непосредственно подсказками с учётом возможных
  орфографическх ошибок, сосредоточены в библиотеке ``SuggestLib``. Кроме них
  в библиотеке находятся вспомогательные функции преобразования раскладок,
  нахождения расстояния Левенштейна и другие.

  Тесты к этой библиотеке находятся в папке ``SuggestLibTest``.

* Создание словарей подсказок происходит с помощью утилиты ``compiler``.

* Сама служба подсказок находится в папке ``service``. Она может работать
  как консольная утилита, как CGI-сервис или как FastCGI-сервис. Первый
  вариант удобен для быстрого тестирования, последний --- предпочтительный
  способ подключения к веб-серверу.

* Как правило, одновременно запускается неколько FastCGI процессов ``service``.
  Каждый из них может подгружать в память копию словаря, однако это может
  привести к недопустимому расходу ОЗУ. Для решения этой проблемы существует
  служба ``dictionaryd``. Она может быть установлена как служба Windows или как
  демон Linux. Служба загружает одну копию словарей в разделяемую память, а
  процессы ``service`` могут подключаться к этой памяти.

* Визуализация подсказок в браузере собрана в папке ``ajax``.

* Вспомогательные скрипты для автоматизации построения словарей подсказок
  старого Рынка и словарей из русско- и англоязычных баз Пастухова лежат в
  папке ``scripts``.


Схема работы
============

Перед использованием словарь необходимо "скомпилировать". Этим занимается
утилита ``compiler``. В процессе её работы исходные данные подсказок
обрабатываются и сохраняются в словарь подсказок.

Далее, к веб-серверу по FastCGI подключается ``service``. В простейшем
случае, если словарь не очень велик, сервису просто указывается путь к словарю.
После этого по определённому в настройках веб-сервера адресу будет доступна
служба подсказок. Эта служба возвращает данные в JSON.

Последним этапом является установка ajax части на страницы, на которых
предполагается работа autocomplete. На textbox вешается обработчик нажатий
клавиш, на каждое нажатие службе отправляется ajax запрос, получается ответ и
отрисовывается окошко подсказок.


Установка и настройка
=====================

Зависимости
-----------

Перед сборкой проекта необходимо установить библиотеки:

* Qt версии 4.4 или выше;
* libfcgi
* google-glog 0.3.0 или выше.


Установка
---------

Предполагается, что все приведенные ниже команды выполняются из корневой папки
проекта.

1. Сборка службы подсказок ``service`` происходит так::

        cd service
        qmake
        make

2. Сборка компилятора словаря ``compiler``::

        cd compiler
        qmake
        make

3. Сборка службы хранения словарей в разделяемой памяти ``dictionaryd``::

        cd dictionaryd
        qmake
        make

4. Скомпилируем тестовый словарь подсказок. Запустим компилятор::

        compiler/bin/compiler /tmp/test.dict

   и введём несколько произвольных строк, например::

        test 1
        test 2
        test 3

   Для завершения ввода на пустой строчке нажимаем ``Ctrl+D``. Компилятор
   должен вывести немного служебной информации, а в папке ``/tmp`` должен
   появиться файл ``test.dict``.

5. Проверим работоспособность службы, сделав запрос из консоли::

        service/bin/SuggestService --dictionary-file=/tmp/test.dict q=test

   Если всё хорошо, то должны получить ответ::

        Content-Type: text/html; charset="utf-8"

        [{t:"0", w:[["test 1",0,4,0],["test 2",0,4,0],["test 3",0,4,0]]}]

6. Подключение службы ``service`` к веб-серверу через FastCGI. Пример
   конфигурации для Apache::

        FastCgiServer /var/www/suggest/service/bin/SuggestService \
                      -initial-env suggest_xml-settings=/var/www/suggest/service/bin/settings.xml
        ScriptAlias /suggest.fcgi /var/www/suggest/service/bin/SuggestService

   Обратите внимание, что через перменную окружения ``suggest_xml-settings`` мы
   передали параметр идентичный параметру ``xml-settings`` командной строки.
   В нём мы указали путь к файлу настроек ``settings.xml`` (см.
   `Формат файла настроек службы подсказок`_).

7. В файле настроек ``settings.xml`` пропишем путь к нашему тестовому словарю::

        ...
        <Dictionary>/tmp/test.dict</Dictionary>
        ...

8. Перезапустим apache и попробуем получить ответ от сервиса в браузере по
   адресу http://localhost/suggest.fcgi?q=test (точный адрес может зависить от
   настроек apache). Если всё хорошо, то должны получить ответ, аналогичный
   п. 5.

9. Пример установки браузерной части сервиса см. в папке ``ajax``. Коротко,
   нужно подключить скрипт ``jquery.autocomplete.js`` и стиль
   ``jquery.autocomplete.css``, и выполнить над TextBox'ом::

        $("#MyTextBox).autocomplete('suggest.fcgi', ... )

   Пример см. в файле ``ajax/index.html``.


Формат файла настроек службы подсказок
--------------------------------------

В простых случаях служба может работать и без особых настроек. Достаточно
передать путь к файлу словаря с помощью аргумента командной строки
``--dictionary-file`` (тот же эффект имеет установка переменной среды окружения
``suggest_dictionary-file``). Другой вариант -- это подключиться к общей
памяти. Для этого должна быть запущена служба (демон) ``dictionaryd``, а
сервису передаётся имя памяти опцией ``-shared-key`` или в переменной среды
окружения ``suggest_shared-key``.

При необходимости более тонкой настройки службы создаётся xml-файл настроек, а
путь к нему передаётся сервису в параметре командной строки ``--xml-settings``
или же в переменной среды окружения ``suggest_xml-settings``.

Пример файла настроек:

.. code-block:: xml

    <Settings>
        <!-- Настройка сервиса подсказок.
             
             minQueryLen: минимальная длина запроса, после которой сервис
                          начинает работу -->
        <Suggest minQueryLen="3">

            <!-- Кеширование долгих запросов. Если true, то запросы, обработка
                 которых заняла больше minTime миллисекунд, будут кешироваться
                 в оперативной памяти. Задание небольших величин может привести
                 к значительному разбуханию сервиса в памяти. -->
            <CacheLongQueries minTime="75">true</CacheLongQueries>

            <!-- Журналирование долгих запросов. Если true и время обработки
                 запроса заняла больше minTime, запрос будет помещён в лог. -->
            <LogLongQueries minTime="75">true</LogLongQueries>

            <!-- Список загружаемых словарей. Может загружаться или из файла, или
                 по ключу из общей памяти (см. dictionaryd) -->
            <Dictionaries>
                <!-- Словарь, загружаемый из файла -->
                <Dictionary>/tmp/test.dict</Dictionary>

                <!-- Словарь из общей памяти -->
                <Dictionary sharedMemoryKey="yottos.suggest.web-en"></Dictionary>
            </Dictionaries>
            
            <!-- Исправление раскладки, если true.

                 minQueryLen: минимальная длина запроса, после которой функция
                              активизируется. -->
            <FixLayout minQueryLen="0">true</FixLayout>

            <!-- "Лёгкий" алгоритм коррекции орфографии, если true.

                 minQueryLen: минимальная длина запроса, после которой функция
                              активизируется. -->
            <FixSpellingLight minQueryLen="0">true</FixSpellingLight>

            <!-- "Полный" алгоритм коррекции орфографии, если true.

                 minQueryLen: минимальная длина запроса, после которой функция
                              активизируется. -->
            <FixSpellingFull minQueryLen="4">true</FixSpellingFull>

        </Suggest>
    </Settings>

Из него видно, что можно настроить длины запроса, после которых включается весь
сервис, исправление "лёгких" орфографических ошибок и исправление "тяжёлых"
орфографических ошибок. Очень важными тегами являются теги ``Dictionary``, 
задающие путь к словарю.
