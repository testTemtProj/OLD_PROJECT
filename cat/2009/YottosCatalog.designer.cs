#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YottosCatalog
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="yottos_catalog_1033")]
	public partial class YottosCatalogDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertsub_category_tree(sub_category_tree instance);
    partial void Updatesub_category_tree(sub_category_tree instance);
    partial void Deletesub_category_tree(sub_category_tree instance);
    partial void Insertroot_category(root_category instance);
    partial void Updateroot_category(root_category instance);
    partial void Deleteroot_category(root_category instance);
    partial void Insertsub_category(sub_category instance);
    partial void Updatesub_category(sub_category instance);
    partial void Deletesub_category(sub_category instance);
    partial void Insertanswer(answer instance);
    partial void Updateanswer(answer instance);
    partial void Deleteanswer(answer instance);
    partial void Insertquestion(question instance);
    partial void Updatequestion(question instance);
    partial void Deletequestion(question instance);
    partial void Insertlink(link instance);
    partial void Updatelink(link instance);
    partial void Deletelink(link instance);
    #endregion
		
		/*public YottosCatalogDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["1033"].ConnectionString, mappingSource)
		{
			OnCreated();
		}*/
		
		public YottosCatalogDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<sub_category_tree> sub_category_trees
		{
			get
			{
				return this.GetTable<sub_category_tree>();
			}
		}
		
		public System.Data.Linq.Table<root_category> root_categories
		{
			get
			{
				return this.GetTable<root_category>();
			}
		}
		
		public System.Data.Linq.Table<sub_category> sub_categories
		{
			get
			{
				return this.GetTable<sub_category>();
			}
		}
		
		public System.Data.Linq.Table<answer> answers
		{
			get
			{
				return this.GetTable<answer>();
			}
		}
		
		public System.Data.Linq.Table<question> questions
		{
			get
			{
				return this.GetTable<question>();
			}
		}
		
		public System.Data.Linq.Table<link> links
		{
			get
			{
				return this.GetTable<link>();
			}
		}
		
		[Function(Name="dbo.validate_link", IsComposable=true)]
		public System.Nullable<bool> validate_link([Parameter(DbType="NVarChar(MAX)")] string url, [Parameter(DbType="NVarChar(128)")] string email)
		{
			return ((System.Nullable<bool>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), url, email).ReturnValue));
		}
	}
	
	[Table(Name="dbo.sub_category_tree")]
	public partial class sub_category_tree : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _sub_root_id;
		
		private int _sub_nested_id;
		
		private EntityRef<sub_category> _nested_sub_category;
		
		private EntityRef<sub_category> _root_sub_category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onsub_root_idChanging(int value);
    partial void Onsub_root_idChanged();
    partial void Onsub_nested_idChanging(int value);
    partial void Onsub_nested_idChanged();
    #endregion
		
		public sub_category_tree()
		{
			this._nested_sub_category = default(EntityRef<sub_category>);
			this._root_sub_category = default(EntityRef<sub_category>);
			OnCreated();
		}
		
		[Column(Storage="_sub_root_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sub_root_id
		{
			get
			{
				return this._sub_root_id;
			}
			set
			{
				if ((this._sub_root_id != value))
				{
					if (this._root_sub_category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsub_root_idChanging(value);
					this.SendPropertyChanging();
					this._sub_root_id = value;
					this.SendPropertyChanged("sub_root_id");
					this.Onsub_root_idChanged();
				}
			}
		}
		
		[Column(Storage="_sub_nested_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int sub_nested_id
		{
			get
			{
				return this._sub_nested_id;
			}
			set
			{
				if ((this._sub_nested_id != value))
				{
					if (this._nested_sub_category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsub_nested_idChanging(value);
					this.SendPropertyChanging();
					this._sub_nested_id = value;
					this.SendPropertyChanged("sub_nested_id");
					this.Onsub_nested_idChanged();
				}
			}
		}
		
		[Association(Name="sub_category_sub_category_tree", Storage="_nested_sub_category", ThisKey="sub_nested_id", OtherKey="id", IsForeignKey=true)]
		public sub_category nested_sub_category
		{
			get
			{
				return this._nested_sub_category.Entity;
			}
			set
			{
				sub_category previousValue = this._nested_sub_category.Entity;
				if (((previousValue != value) 
							|| (this._nested_sub_category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._nested_sub_category.Entity = null;
						previousValue.root_sub_category_trees.Remove(this);
					}
					this._nested_sub_category.Entity = value;
					if ((value != null))
					{
						value.root_sub_category_trees.Add(this);
						this._sub_nested_id = value.id;
					}
					else
					{
						this._sub_nested_id = default(int);
					}
					this.SendPropertyChanged("nested_sub_category");
				}
			}
		}
		
		[Association(Name="sub_category_sub_category_tree1", Storage="_root_sub_category", ThisKey="sub_root_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sub_category root_sub_category
		{
			get
			{
				return this._root_sub_category.Entity;
			}
			set
			{
				sub_category previousValue = this._root_sub_category.Entity;
				if (((previousValue != value) 
							|| (this._root_sub_category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._root_sub_category.Entity = null;
						previousValue.nested_sub_category_trees.Remove(this);
					}
					this._root_sub_category.Entity = value;
					if ((value != null))
					{
						value.nested_sub_category_trees.Add(this);
						this._sub_root_id = value.id;
					}
					else
					{
						this._sub_root_id = default(int);
					}
					this.SendPropertyChanged("root_sub_category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.root_categories")]
	public partial class root_category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _name;
		
		private string _root_category_description;
		
		private System.Guid _icon_uid;
		
		private System.Data.Linq.Binary _icon;
		
		private EntitySet<sub_category> _sub_categories;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onroot_category_descriptionChanging(string value);
    partial void Onroot_category_descriptionChanged();
    partial void Onicon_uidChanging(System.Guid value);
    partial void Onicon_uidChanged();
    partial void OniconChanging(System.Data.Linq.Binary value);
    partial void OniconChanged();
    #endregion
		
		public root_category()
		{
			this._sub_categories = new EntitySet<sub_category>(new Action<sub_category>(this.attach_sub_categories), new Action<sub_category>(this.detach_sub_categories));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_root_category_description", DbType="NVarChar(MAX)")]
		public string root_category_description
		{
			get
			{
				return this._root_category_description;
			}
			set
			{
				if ((this._root_category_description != value))
				{
					this.Onroot_category_descriptionChanging(value);
					this.SendPropertyChanging();
					this._root_category_description = value;
					this.SendPropertyChanged("root_category_description");
					this.Onroot_category_descriptionChanged();
				}
			}
		}
		
		[Column(Storage="_icon_uid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid icon_uid
		{
			get
			{
				return this._icon_uid;
			}
			set
			{
				if ((this._icon_uid != value))
				{
					this.Onicon_uidChanging(value);
					this.SendPropertyChanging();
					this._icon_uid = value;
					this.SendPropertyChanged("icon_uid");
					this.Onicon_uidChanged();
				}
			}
		}
		
		[Column(Storage="_icon", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[Association(Name="root_category_sub_category", Storage="_sub_categories", ThisKey="id", OtherKey="root_category_id")]
		public EntitySet<sub_category> sub_categories
		{
			get
			{
				return this._sub_categories;
			}
			set
			{
				this._sub_categories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_sub_categories(sub_category entity)
		{
			this.SendPropertyChanging();
			entity.root_category = this;
		}
		
		private void detach_sub_categories(sub_category entity)
		{
			this.SendPropertyChanging();
			entity.root_category = null;
		}
	}
	
	[Table(Name="dbo.sub_categories")]
	public partial class sub_category : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _root_category_id;
		
		private string _name;
		
		private string _sub_category_description;
		
		private System.Guid _icon_uid;
		
		private System.Data.Linq.Binary _icon;
		
		private EntitySet<sub_category_tree> _root_category_trees;
		
		private EntitySet<sub_category_tree> _nested_sub_category_trees;
		
		private EntitySet<link> _links;
		
		private EntityRef<root_category> _root_category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onroot_category_idChanging(int value);
    partial void Onroot_category_idChanged();
    partial void OnnameChanging(string value);
    partial void OnnameChanged();
    partial void Onsub_category_descriptionChanging(string value);
    partial void Onsub_category_descriptionChanged();
    partial void Onicon_uidChanging(System.Guid value);
    partial void Onicon_uidChanged();
    partial void OniconChanging(System.Data.Linq.Binary value);
    partial void OniconChanged();
    #endregion
		
		public sub_category()
		{
			this._root_category_trees = new EntitySet<sub_category_tree>(new Action<sub_category_tree>(this.attach_root_category_trees), new Action<sub_category_tree>(this.detach_root_category_trees));
			this._nested_sub_category_trees = new EntitySet<sub_category_tree>(new Action<sub_category_tree>(this.attach_nested_sub_category_trees), new Action<sub_category_tree>(this.detach_nested_sub_category_trees));
			this._links = new EntitySet<link>(new Action<link>(this.attach_links), new Action<link>(this.detach_links));
			this._root_category = default(EntityRef<root_category>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_root_category_id", DbType="Int NOT NULL")]
		public int root_category_id
		{
			get
			{
				return this._root_category_id;
			}
			set
			{
				if ((this._root_category_id != value))
				{
					if (this._root_category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onroot_category_idChanging(value);
					this.SendPropertyChanging();
					this._root_category_id = value;
					this.SendPropertyChanged("root_category_id");
					this.Onroot_category_idChanged();
				}
			}
		}
		
		[Column(Storage="_name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string name
		{
			get
			{
				return this._name;
			}
			set
			{
				if ((this._name != value))
				{
					this.OnnameChanging(value);
					this.SendPropertyChanging();
					this._name = value;
					this.SendPropertyChanged("name");
					this.OnnameChanged();
				}
			}
		}
		
		[Column(Storage="_sub_category_description", DbType="NVarChar(MAX)")]
		public string sub_category_description
		{
			get
			{
				return this._sub_category_description;
			}
			set
			{
				if ((this._sub_category_description != value))
				{
					this.Onsub_category_descriptionChanging(value);
					this.SendPropertyChanging();
					this._sub_category_description = value;
					this.SendPropertyChanged("sub_category_description");
					this.Onsub_category_descriptionChanged();
				}
			}
		}
		
		[Column(Storage="_icon_uid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid icon_uid
		{
			get
			{
				return this._icon_uid;
			}
			set
			{
				if ((this._icon_uid != value))
				{
					this.Onicon_uidChanging(value);
					this.SendPropertyChanging();
					this._icon_uid = value;
					this.SendPropertyChanged("icon_uid");
					this.Onicon_uidChanged();
				}
			}
		}
		
		[Column(Storage="_icon", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary icon
		{
			get
			{
				return this._icon;
			}
			set
			{
				if ((this._icon != value))
				{
					this.OniconChanging(value);
					this.SendPropertyChanging();
					this._icon = value;
					this.SendPropertyChanged("icon");
					this.OniconChanged();
				}
			}
		}
		
		[Association(Name="sub_category_sub_category_tree", Storage="_root_category_trees", ThisKey="id", OtherKey="sub_nested_id")]
		public EntitySet<sub_category_tree> root_sub_category_trees
		{
			get
			{
				return this._root_category_trees;
			}
			set
			{
				this._root_category_trees.Assign(value);
			}
		}
		
		[Association(Name="sub_category_sub_category_tree1", Storage="_nested_sub_category_trees", ThisKey="id", OtherKey="sub_root_id")]
		public EntitySet<sub_category_tree> nested_sub_category_trees
		{
			get
			{
				return this._nested_sub_category_trees;
			}
			set
			{
				this._nested_sub_category_trees.Assign(value);
			}
		}
		
		[Association(Name="sub_category_link", Storage="_links", ThisKey="id", OtherKey="sub_category_id")]
		public EntitySet<link> links
		{
			get
			{
				return this._links;
			}
			set
			{
				this._links.Assign(value);
			}
		}
		
		[Association(Name="root_category_sub_category", Storage="_root_category", ThisKey="root_category_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public root_category root_category
		{
			get
			{
				return this._root_category.Entity;
			}
			set
			{
				root_category previousValue = this._root_category.Entity;
				if (((previousValue != value) 
							|| (this._root_category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._root_category.Entity = null;
						previousValue.sub_categories.Remove(this);
					}
					this._root_category.Entity = value;
					if ((value != null))
					{
						value.sub_categories.Add(this);
						this._root_category_id = value.id;
					}
					else
					{
						this._root_category_id = default(int);
					}
					this.SendPropertyChanged("root_category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_root_category_trees(sub_category_tree entity)
		{
			this.SendPropertyChanging();
			entity.nested_sub_category = this;
		}
		
		private void detach_root_category_trees(sub_category_tree entity)
		{
			this.SendPropertyChanging();
			entity.nested_sub_category = null;
		}
		
		private void attach_nested_sub_category_trees(sub_category_tree entity)
		{
			this.SendPropertyChanging();
			entity.root_sub_category = this;
		}
		
		private void detach_nested_sub_category_trees(sub_category_tree entity)
		{
			this.SendPropertyChanging();
			entity.root_sub_category = null;
		}
		
		private void attach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.sub_category = this;
		}
		
		private void detach_links(link entity)
		{
			this.SendPropertyChanging();
			entity.sub_category = null;
		}
	}
	
	[Table(Name="dbo.answers")]
	public partial class answer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _question_id;
		
		private string _answer_txt;
		
		private string _associated_url;
		
		private System.Guid _image_uid;
		
		private string _image_type;
		
		private System.Data.Linq.Binary _answer_image;
		
		private EntityRef<question> _question;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onquestion_idChanging(int value);
    partial void Onquestion_idChanged();
    partial void Onanswer_txtChanging(string value);
    partial void Onanswer_txtChanged();
    partial void Onassociated_urlChanging(string value);
    partial void Onassociated_urlChanged();
    partial void Onimage_uidChanging(System.Guid value);
    partial void Onimage_uidChanged();
    partial void Onimage_typeChanging(string value);
    partial void Onimage_typeChanged();
    partial void Onanswer_imageChanging(System.Data.Linq.Binary value);
    partial void Onanswer_imageChanged();
    #endregion
		
		public answer()
		{
			this._question = default(EntityRef<question>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_question_id", DbType="Int NOT NULL")]
		public int question_id
		{
			get
			{
				return this._question_id;
			}
			set
			{
				if ((this._question_id != value))
				{
					if (this._question.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onquestion_idChanging(value);
					this.SendPropertyChanging();
					this._question_id = value;
					this.SendPropertyChanged("question_id");
					this.Onquestion_idChanged();
				}
			}
		}
		
		[Column(Name="answer", Storage="_answer_txt", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string answer_txt
		{
			get
			{
				return this._answer_txt;
			}
			set
			{
				if ((this._answer_txt != value))
				{
					this.Onanswer_txtChanging(value);
					this.SendPropertyChanging();
					this._answer_txt = value;
					this.SendPropertyChanged("answer_txt");
					this.Onanswer_txtChanged();
				}
			}
		}
		
		[Column(Storage="_associated_url", DbType="NVarChar(255)")]
		public string associated_url
		{
			get
			{
				return this._associated_url;
			}
			set
			{
				if ((this._associated_url != value))
				{
					this.Onassociated_urlChanging(value);
					this.SendPropertyChanging();
					this._associated_url = value;
					this.SendPropertyChanged("associated_url");
					this.Onassociated_urlChanged();
				}
			}
		}
		
		[Column(Storage="_image_uid", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid image_uid
		{
			get
			{
				return this._image_uid;
			}
			set
			{
				if ((this._image_uid != value))
				{
					this.Onimage_uidChanging(value);
					this.SendPropertyChanging();
					this._image_uid = value;
					this.SendPropertyChanged("image_uid");
					this.Onimage_uidChanged();
				}
			}
		}
		
		[Column(Storage="_image_type", DbType="NVarChar(100)")]
		public string image_type
		{
			get
			{
				return this._image_type;
			}
			set
			{
				if ((this._image_type != value))
				{
					this.Onimage_typeChanging(value);
					this.SendPropertyChanging();
					this._image_type = value;
					this.SendPropertyChanged("image_type");
					this.Onimage_typeChanged();
				}
			}
		}
		
		[Column(Storage="_answer_image", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary answer_image
		{
			get
			{
				return this._answer_image;
			}
			set
			{
				if ((this._answer_image != value))
				{
					this.Onanswer_imageChanging(value);
					this.SendPropertyChanging();
					this._answer_image = value;
					this.SendPropertyChanged("answer_image");
					this.Onanswer_imageChanged();
				}
			}
		}
		
		[Association(Name="question_answer", Storage="_question", ThisKey="question_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public question question
		{
			get
			{
				return this._question.Entity;
			}
			set
			{
				question previousValue = this._question.Entity;
				if (((previousValue != value) 
							|| (this._question.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._question.Entity = null;
						previousValue.answers.Remove(this);
					}
					this._question.Entity = value;
					if ((value != null))
					{
						value.answers.Add(this);
						this._question_id = value.id;
					}
					else
					{
						this._question_id = default(int);
					}
					this.SendPropertyChanged("question");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.questions")]
	public partial class question : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _profession;
		
		private string _question_txt;
		
		private EntitySet<answer> _answers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnprofessionChanging(string value);
    partial void OnprofessionChanged();
    partial void Onquestion_txtChanging(string value);
    partial void Onquestion_txtChanged();
    #endregion
		
		public question()
		{
			this._answers = new EntitySet<answer>(new Action<answer>(this.attach_answers), new Action<answer>(this.detach_answers));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_profession", DbType="NVarChar(128)")]
		public string profession
		{
			get
			{
				return this._profession;
			}
			set
			{
				if ((this._profession != value))
				{
					this.OnprofessionChanging(value);
					this.SendPropertyChanging();
					this._profession = value;
					this.SendPropertyChanged("profession");
					this.OnprofessionChanged();
				}
			}
		}
		
		[Column(Name="question", Storage="_question_txt", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string question_txt
		{
			get
			{
				return this._question_txt;
			}
			set
			{
				if ((this._question_txt != value))
				{
					this.Onquestion_txtChanging(value);
					this.SendPropertyChanging();
					this._question_txt = value;
					this.SendPropertyChanged("question_txt");
					this.Onquestion_txtChanged();
				}
			}
		}
		
		[Association(Name="question_answer", Storage="_answers", ThisKey="id", OtherKey="question_id")]
		public EntitySet<answer> answers
		{
			get
			{
				return this._answers;
			}
			set
			{
				this._answers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_answers(answer entity)
		{
			this.SendPropertyChanging();
			entity.question = this;
		}
		
		private void detach_answers(answer entity)
		{
			this.SendPropertyChanging();
			entity.question = null;
		}
	}
	
	[Table(Name="dbo.links")]
	public partial class link : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _sub_category_id;
		
		private string _url;
		
		private string _caption;
		
		private string _url_prepared_caption;
		
		private string _link_description;
		
		private int _link_counter;
		
		private bool _is_accepted;
		
		private System.DateTime _date_add;
		
		private string _author_email;
		
		private System.DateTime _last_checked;
		
		private int _check_count;
		
		private EntityRef<sub_category> _sub_category;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onsub_category_idChanging(int value);
    partial void Onsub_category_idChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    partial void OncaptionChanging(string value);
    partial void OncaptionChanged();
    partial void Onurl_prepared_captionChanging(string value);
    partial void Onurl_prepared_captionChanged();
    partial void Onlink_descriptionChanging(string value);
    partial void Onlink_descriptionChanged();
    partial void Onlink_counterChanging(int value);
    partial void Onlink_counterChanged();
    partial void Onis_acceptedChanging(bool value);
    partial void Onis_acceptedChanged();
    partial void Ondate_addChanging(System.DateTime value);
    partial void Ondate_addChanged();
    partial void Onauthor_emailChanging(string value);
    partial void Onauthor_emailChanged();
    partial void Onlast_checkedChanging(System.DateTime value);
    partial void Onlast_checkedChanged();
    partial void Oncheck_countChanging(int value);
    partial void Oncheck_countChanged();
    #endregion
		
		public link()
		{
			this._sub_category = default(EntityRef<sub_category>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_sub_category_id", DbType="Int NOT NULL")]
		public int sub_category_id
		{
			get
			{
				return this._sub_category_id;
			}
			set
			{
				if ((this._sub_category_id != value))
				{
					if (this._sub_category.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onsub_category_idChanging(value);
					this.SendPropertyChanging();
					this._sub_category_id = value;
					this.SendPropertyChanged("sub_category_id");
					this.Onsub_category_idChanged();
				}
			}
		}
		
		[Column(Storage="_url", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[Column(Storage="_caption", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string caption
		{
			get
			{
				return this._caption;
			}
			set
			{
				if ((this._caption != value))
				{
					this.OncaptionChanging(value);
					this.SendPropertyChanging();
					this._caption = value;
					this.SendPropertyChanged("caption");
					this.OncaptionChanged();
				}
			}
		}
		
		[Column(Storage="_url_prepared_caption", DbType="NVarChar(255)")]
		public string url_prepared_caption
		{
			get
			{
				return this._url_prepared_caption;
			}
			set
			{
				if ((this._url_prepared_caption != value))
				{
					this.Onurl_prepared_captionChanging(value);
					this.SendPropertyChanging();
					this._url_prepared_caption = value;
					this.SendPropertyChanged("url_prepared_caption");
					this.Onurl_prepared_captionChanged();
				}
			}
		}
		
		[Column(Storage="_link_description", DbType="NVarChar(MAX)")]
		public string link_description
		{
			get
			{
				return this._link_description;
			}
			set
			{
				if ((this._link_description != value))
				{
					this.Onlink_descriptionChanging(value);
					this.SendPropertyChanging();
					this._link_description = value;
					this.SendPropertyChanged("link_description");
					this.Onlink_descriptionChanged();
				}
			}
		}
		
		[Column(Storage="_link_counter", DbType="Int NOT NULL")]
		public int link_counter
		{
			get
			{
				return this._link_counter;
			}
			set
			{
				if ((this._link_counter != value))
				{
					this.Onlink_counterChanging(value);
					this.SendPropertyChanging();
					this._link_counter = value;
					this.SendPropertyChanged("link_counter");
					this.Onlink_counterChanged();
				}
			}
		}
		
		[Column(Storage="_is_accepted", DbType="Bit NOT NULL")]
		public bool is_accepted
		{
			get
			{
				return this._is_accepted;
			}
			set
			{
				if ((this._is_accepted != value))
				{
					this.Onis_acceptedChanging(value);
					this.SendPropertyChanging();
					this._is_accepted = value;
					this.SendPropertyChanged("is_accepted");
					this.Onis_acceptedChanged();
				}
			}
		}
		
		[Column(Storage="_date_add", DbType="Date NOT NULL")]
		public System.DateTime date_add
		{
			get
			{
				return this._date_add;
			}
			set
			{
				if ((this._date_add != value))
				{
					this.Ondate_addChanging(value);
					this.SendPropertyChanging();
					this._date_add = value;
					this.SendPropertyChanged("date_add");
					this.Ondate_addChanged();
				}
			}
		}
		
		[Column(Storage="_author_email", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string author_email
		{
			get
			{
				return this._author_email;
			}
			set
			{
				if ((this._author_email != value))
				{
					this.Onauthor_emailChanging(value);
					this.SendPropertyChanging();
					this._author_email = value;
					this.SendPropertyChanged("author_email");
					this.Onauthor_emailChanged();
				}
			}
		}
		
		[Column(Storage="_last_checked", DbType="DateTime NOT NULL")]
		public System.DateTime last_checked
		{
			get
			{
				return this._last_checked;
			}
			set
			{
				if ((this._last_checked != value))
				{
					this.Onlast_checkedChanging(value);
					this.SendPropertyChanging();
					this._last_checked = value;
					this.SendPropertyChanged("last_checked");
					this.Onlast_checkedChanged();
				}
			}
		}
		
		[Column(Storage="_check_count", DbType="Int NOT NULL")]
		public int check_count
		{
			get
			{
				return this._check_count;
			}
			set
			{
				if ((this._check_count != value))
				{
					this.Oncheck_countChanging(value);
					this.SendPropertyChanging();
					this._check_count = value;
					this.SendPropertyChanged("check_count");
					this.Oncheck_countChanged();
				}
			}
		}
		
		[Association(Name="sub_category_link", Storage="_sub_category", ThisKey="sub_category_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public sub_category sub_category
		{
			get
			{
				return this._sub_category.Entity;
			}
			set
			{
				sub_category previousValue = this._sub_category.Entity;
				if (((previousValue != value) 
							|| (this._sub_category.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._sub_category.Entity = null;
						previousValue.links.Remove(this);
					}
					this._sub_category.Entity = value;
					if ((value != null))
					{
						value.links.Add(this);
						this._sub_category_id = value.id;
					}
					else
					{
						this._sub_category_id = default(int);
					}
					this.SendPropertyChanged("sub_category");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
