#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3074
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace YottosCatalog
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="catalog_url_mappins")]
	public partial class YottosCatalogUrlMappingsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void Insertactual_url(actual_url instance);
    partial void Updateactual_url(actual_url instance);
    partial void Deleteactual_url(actual_url instance);
    partial void Inserttransformed_url(transformed_url instance);
    partial void Updatetransformed_url(transformed_url instance);
    partial void Deletetransformed_url(transformed_url instance);
    #endregion
		
		public YottosCatalogUrlMappingsDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["yottos_catalog_url_mappinsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogUrlMappingsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogUrlMappingsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogUrlMappingsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public YottosCatalogUrlMappingsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<actual_url> actual_urls
		{
			get
			{
				return this.GetTable<actual_url>();
			}
		}
		
		public System.Data.Linq.Table<transformed_url> transformed_urls
		{
			get
			{
				return this.GetTable<transformed_url>();
			}
		}
	}
	
	[Table(Name="dbo.actual_urls")]
	public partial class actual_url : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _url;
		
		private EntitySet<transformed_url> _transformed_urls;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public actual_url()
		{
			this._transformed_urls = new EntitySet<transformed_url>(new Action<transformed_url>(this.attach_transformed_urls), new Action<transformed_url>(this.detach_transformed_urls));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_url", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[Association(Name="actual_url_transformed_url", Storage="_transformed_urls", ThisKey="id", OtherKey="actual_url_id")]
		public EntitySet<transformed_url> transformed_urls
		{
			get
			{
				return this._transformed_urls;
			}
			set
			{
				this._transformed_urls.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_transformed_urls(transformed_url entity)
		{
			this.SendPropertyChanging();
			entity.actual_url = this;
		}
		
		private void detach_transformed_urls(transformed_url entity)
		{
			this.SendPropertyChanging();
			entity.actual_url = null;
		}
	}
	
	[Table(Name="dbo.transformed_urls")]
	public partial class transformed_url : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _actual_url_id;
		
		private int _lcid;
		
		private string _url;
		
		private EntityRef<actual_url> _actual_url;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void Onactual_url_idChanging(int value);
    partial void Onactual_url_idChanged();
    partial void OnlcidChanging(int value);
    partial void OnlcidChanged();
    partial void OnurlChanging(string value);
    partial void OnurlChanged();
    #endregion
		
		public transformed_url()
		{
			this._actual_url = default(EntityRef<actual_url>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_actual_url_id", DbType="Int NOT NULL")]
		public int actual_url_id
		{
			get
			{
				return this._actual_url_id;
			}
			set
			{
				if ((this._actual_url_id != value))
				{
					if (this._actual_url.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onactual_url_idChanging(value);
					this.SendPropertyChanging();
					this._actual_url_id = value;
					this.SendPropertyChanged("actual_url_id");
					this.Onactual_url_idChanged();
				}
			}
		}
		
		[Column(Storage="_lcid", DbType="Int NOT NULL")]
		public int lcid
		{
			get
			{
				return this._lcid;
			}
			set
			{
				if ((this._lcid != value))
				{
					this.OnlcidChanging(value);
					this.SendPropertyChanging();
					this._lcid = value;
					this.SendPropertyChanged("lcid");
					this.OnlcidChanged();
				}
			}
		}
		
		[Column(Storage="_url", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string url
		{
			get
			{
				return this._url;
			}
			set
			{
				if ((this._url != value))
				{
					this.OnurlChanging(value);
					this.SendPropertyChanging();
					this._url = value;
					this.SendPropertyChanged("url");
					this.OnurlChanged();
				}
			}
		}
		
		[Association(Name="actual_url_transformed_url", Storage="_actual_url", ThisKey="actual_url_id", OtherKey="id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public actual_url actual_url
		{
			get
			{
				return this._actual_url.Entity;
			}
			set
			{
				actual_url previousValue = this._actual_url.Entity;
				if (((previousValue != value) 
							|| (this._actual_url.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._actual_url.Entity = null;
						previousValue.transformed_urls.Remove(this);
					}
					this._actual_url.Entity = value;
					if ((value != null))
					{
						value.transformed_urls.Add(this);
						this._actual_url_id = value.id;
					}
					else
					{
						this._actual_url_id = default(int);
					}
					this.SendPropertyChanged("actual_url");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
