==============
Общие сведения
==============

Yottos GetMyAd --- это рекламная партнёрская сеть. Система является посредником
между рекламодателями, желающими рекламировать свои рекламные предложения, и 
владельцами сайтов, желающими заработать, предоставляя место под рекламу на
своих сайтах.

Весь проект разбивается на две части: RG, которая занимается непосредственно
показом рекламы, и собственно GetMyAd, которой представляет собой
пользовательский интерфейс.

Рекламные предложения создаются в Yottos Adload. Там же рекламодатели могут
пополнять счёт и смотреть за ходом рекламной кампании. Со временем проект
AdLoad должен замениться более совершенным CleverAd.

GetMyAd, в свою очередь, предназначен для владельцев сайтов. В нём они могут
создавать информеры, смотреть статистику и получать денежные средства.


=================
Структура проекта
=================

Схема работы
------------

Менеджеры Yottos отмечают среди всех кампаний AdLoad те, которые должны
рекламироваться в GetMyAd. Отмеченные кампании впоследствии можно запускать на
показ рекламы и останавливать. Кроме того, для каждой такой кампании менеджеры
настраивают условия показа --- геотаргетинг, время показа, текматику кампании
и т.д. Настройки кампании GetMyAd хранит в своей базе данных. Более того, при
запуске кампании GetMyAd также копирует себе в базу данных товары, полученные
от AdLoad.

Владелец сайта регистрируется в GetMyAd и создаёт один или несколько
информеров. При этом он получает код, который устанавливает у себя на сайте.
Когда на сайт приходит посетитель, код подгружает информер с рекламными
предложения от RG (getmyad-worker). Этот код отдаёт те предложения, которые
подходят по настройкам для данного пользователя в данное время и т.д. (см. 
настройки кампании).

Если пользователь кликнул по ссылке рекламного предложения, то переход
обрабатывается скриптом redirect.py, который для большей устойчивости вынесен
за рамки GetMyAd. Этот скрипт проверяет действительность клика, отправляет
клик на обработку в AdLoad (где с рекламодателя снимаются деньги) и начисляет
необходимую сумму владельцу сайта.

Рабочие процессы RG получают сообщения об изменениях в настройках кампании
через очередь сообщений RabbitMQ и обращаются напрямую к базе данных GetMyAd.


Использумые сервера
-------------------

**GetMyAd** представляет собой проект на фреймворке Pylons. Соответственно,
хостится как обычное pylons-приложение. На данный момент используется связка
Apache + mod_wsgi на двух рабочий серверах, помещённых за балансировщиком
(см. Схема балансировки). Для работы используется база данных MongoDB, для
надёжности лучше использовать кластер Replica Set минимум из трёх машин.
Кроме того, должен быть настроен Celery и RabbitMQ.

Рабочие процессы **getmyad-worker** (или **RG**) хостятся как
FastCGI-приложения. Не имеет значения, какой запрос придёт к какому воркеру,
поэтому балансировка может осуществляться случайным раскидыванием запросов.
Для работы на каждой рабочей станции, хостящей воркеры, должна быть установлена
MongoDB, не завязанная в реплики. Она используется для быстрого временного
накопления статистики.

**Загрузчики рекламных скриптов** (см. ниже) должны лежать на сервере с
максимальной (100%) доступностью. Загрузчики представляют собой
крошечные статические файлы, число которых равно числу информеров.
Заливаться на этот сервер должны при помощи FTP, настройки которого
должны быть прописаны в конфиге в параметрах ``informer_loader_ftp*``.

В случае падения рабочего процесса getmyad_worker, балансировщик
переключает запросы **резервному серверу**. Резервный сервер раздаёт
статические "заглушки", предварительно подготовленные при создании
информера. Заглушка --- это небольшой HTML файл, подстроенный под
дизайн конкретного информера и содержащий прямые ссылки на социальную
рекламу. Таким образом маскируются нестабильности и перебои в нашей
работе. Заглушки должны заливаться по FTP. Настройки его лежат в конфиге
в параметрах ``reserve_ftp*``.

Статические файлы, предназначенные для массовой раздачи, лежат на
сервере **CDN** (Content Distribution Network). Этими файлами могут быть
картинки, скрипты, видео, презентации, документы и т.п. Этот сервер
должен обладать широким каналом. В идеальном случае, для CDN должно быть
использован отдельный домен без cookies (*см.* `почему 
<http://developer.yahoo.com/performance/rules.html#cookie_free>`_),
так что варианты типа cdn.yottos.com --- это не самые лучшие варианты.
Заливка осуществляется по FTP, за настройку отвечают параметры ``cdn_ftp*``
в конфиге.


Установка и настройка
---------------------



Зависимости для установки
-------------------------

Известно, что проект GetMyAd успешно работает на следущих версиях пакетов 
и программ:

* Python 2.6
* MongoDB 1.8.1
* celery 2.2.6
* pymongo 1.11
* RabbitMQ 2.5.0
* Pylons 1.0
* simplejson 2.1.1
* amqplib 0.6.1
* PIL

Для сборки getmyad-worker (часть RG), необходимы следующие библиотеки
(работа проверялась при указанных версиях):

* boost (1.42)
* libfcgi
* libgeoip
* xmlrpc++ (0.7.0), http://sourceforge.net/projects/xmlrpcpp/files/             
* mongoclient (1.8.1), http://mongodb.org                                       
* google-glog (0.3.1)                                                           
* rabbitmq (0.8)                                                                
* rabbitcpp (http://code.google.com/p/rabbitcpp/)  

Сборка осуществлялась комплятором GCC 4.4.3, рекомендованная система сборки ---
CMake.


Скрипт рекламной выгрузки
-------------------------

Пользователю выдаётся скрипт вида::

	<script type="text/javascript"><!--
	yottos_advertise = "DC7A9260-E4CE-4013-AF5B-C17EAA33FBF1";
	//-->
	</script>
	<script type="text/javascript" src="http://cdn.yottos.com/getmyad/_a.js">
	</script>

``a.js`` -- это статический скрипт, который строит ссылку на скрипт построения информера. 
Ссылка включает в себя UUID выгрузки и дополнительные поля, такие как url открытого сайта,
referrer и т.д.

Скрипты построения информера на данный момент (24/04/2010) представляют собой простые статические 
файлы с именем, содержащим UUID. Всё, что они делают, это выводят тэг ``IFRAME`` старого образца, 
ссылающийся на динамическое составление информера. То есть, никаких преимуществ использования 
javascript загрузки мы пока не используем, кроме одного (возможно, самого важного): возможность
менять размеры выгрузок и вообще весь код без изменения кода, размещённого на сайте пользователя. 

Поскольку загрузка информеров через javascript тормозит загрузку всего сайта на время, пока скрипт 
не будет получен и выполнен, то к надёжности этих двух скриптов предъявляются особые требование. 
Сейчас эти файлы лежат на отдельном хостинге. Заливаются они туда скриптом ``upload-scripts.py``.


Рабочие процессы getmyad-worker (RG)
------------------------------------

Показ рекламы осуществляется модулем getmyad-worker. Эта часть написана на C++
и расчитана на подключение к серверу по FastCGI. Основная нагрузка ложится
именно на этот модуль.

getmyad-worker использует базу данных для получения информации о рекламных
кампаниях, товарах, информерах и т.д. Рассматривалась и даже частично
реализовывалась возможность получения данных от сервера GetMyAd через XML-RPC.

Статистику о показах информер записывать в локальную базу данных MongoDB.
Вставка в capped коллекцию происходит очень быстро. Раз в 10 минут скрипт
import.py агрегирует накопленную статистику и записывает её в основную базу
данных GetMyAd.


Обработка перехода по ссылке рекламного предложения
---------------------------------------------------

Обработка клика производится скриптом redirect.py, который вынесен в отдельное
WSGI приложение. Скрипт написан таким образом, что даже при неработающих
MongoDB, Celery и Adload пользователь будет направлен на адрес рекламного
предложения. 

При работающей celery этот скрипт ставит в очередь задачу на
запись клика и редиректит пользователя. При проблемах с celery задача обработки
клика вызывается немедленно, что приведёт к небольшой задержке перед
перенаправлением пользователя (зависит, в основном, от Adload).

